AWSTemplateFormatVersion: "2010-09-09"
Description: ""
Resources:
    CloudFrontDistribution:
        Type: "AWS::CloudFront::Distribution"
        Properties:
            DistributionConfig: 
                Origins: 
                  - 
                    ConnectionAttempts: 3
                    ConnectionTimeout: 10
                    CustomOriginConfig: 
                        HTTPPort: 80
                        HTTPSPort: 443
                        OriginKeepaliveTimeout: 5
                        OriginProtocolPolicy: "https-only"
                        OriginReadTimeout: 30
                        OriginSSLProtocols: 
                          - "TLSv1.2"
                    DomainName: !Sub "${ApiGatewayV2Api}.execute-api.${AWS::Region}.amazonaws.com"
                    Id: !Sub "${ApiGatewayV2Api}.execute-api.${AWS::Region}.amazonaws.com"
                    OriginPath: ""
                  - 
                    ConnectionAttempts: 3
                    ConnectionTimeout: 10
                    DomainName: !Sub "loa037-cc-final.s3.${AWS::Region}.amazonaws.com"
                    Id: !Sub "loa037-cc-final.s3.${AWS::Region}.amazonaws.com"
                    OriginPath: ""
                    S3OriginConfig: 
                        OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontCloudFrontOriginAccessIdentity2}"
                OriginGroups: 
                    Quantity: 0
                DefaultCacheBehavior: 
                    AllowedMethods: 
                      - "HEAD"
                      - "GET"
                    CachedMethods: 
                      - "HEAD"
                      - "GET"
                    Compress: true
                    CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad"
                    SmoothStreaming: false
                    TargetOriginId: !Sub "loa037-cc-final.s3.${AWS::Region}.amazonaws.com"
                    ViewerProtocolPolicy: "redirect-to-https"
                CacheBehaviors: 
                  - 
                    AllowedMethods: 
                      - "HEAD"
                      - "DELETE"
                      - "POST"
                      - "GET"
                      - "OPTIONS"
                      - "PUT"
                      - "PATCH"
                    Compress: true
                    CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad"
                    PathPattern: "/api"
                    SmoothStreaming: false
                    TargetOriginId: !Sub "${ApiGatewayV2Api}.execute-api.${AWS::Region}.amazonaws.com"
                    ViewerProtocolPolicy: "redirect-to-https"
                Comment: ""
                PriceClass: "PriceClass_100"
                Enabled: true
                ViewerCertificate: 
                    CloudFrontDefaultCertificate: true
                    MinimumProtocolVersion: "TLSv1"
                    SslSupportMethod: "vip"
                Restrictions: 
                    GeoRestriction: 
                        RestrictionType: "none"
                HttpVersion: "http2"
                DefaultRootObject: ""
                IPV6Enabled: true

    ApiGatewayV2Api:
        Type: "AWS::ApiGatewayV2::Api"
        Properties:
            ApiKeySelectionExpression: "$request.header.x-api-key"
            ProtocolType: "HTTP"
            RouteSelectionExpression: "$request.method $request.path"
            DisableExecuteApiEndpoint: false

    ApiGatewayV2Stage:
        Type: "AWS::ApiGatewayV2::Stage"
        Properties:
            StageName: "$default"
            StageVariables: {}
            ApiId: !Ref ApiGatewayV2Api
            DeploymentId: "8opk1o"
            RouteSettings: {}
            DefaultRouteSettings: 
                DetailedMetricsEnabled: false
            AccessLogSettings: 
                DestinationArn: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:apigw"
                Format: "$context.identity.sourceIp - - [$context.requestTime] \"$context.httpMethod $context.routeKey $context.protocol\" $context.status $context.responseLength $context.requestId"
            AutoDeploy: true

    ApiGatewayV2Route:
        Type: "AWS::ApiGatewayV2::Route"
        Properties:
            ApiId: !Ref ApiGatewayV2Api
            ApiKeyRequired: false
            AuthorizationType: "NONE"
            RouteKey: "POST /api"
            Target: !Sub "integrations/${ApiGatewayV2Integration}"

    ApiGatewayV2Integration:
        Type: "AWS::ApiGatewayV2::Integration"
        Properties:
            ApiId: !Ref ApiGatewayV2Api
            ConnectionType: "INTERNET"
            IntegrationMethod: "POST"
            IntegrationType: "AWS_PROXY"
            IntegrationUri: !GetAtt LambdaFunction.Arn
            TimeoutInMillis: 30000
            PayloadFormatVersion: "2.0"

    CloudFrontCloudFrontOriginAccessIdentity:
        Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
        Properties:
            CloudFrontOriginAccessIdentityConfig: 
                Comment: !Sub "access-identity-loa037-cc-assignment-1.s3.${AWS::Region}.amazonaws.com"

    CloudFrontCloudFrontOriginAccessIdentity2:
        Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
        Properties:
            CloudFrontOriginAccessIdentityConfig: 
                Comment: !Sub "access-identity-loa037-cc-final.s3.${AWS::Region}.amazonaws.com"

    LambdaFunction:
        Type: "AWS::Lambda::Function"
        Properties:
            Description: ""
            FunctionName: "loa037-final"
            Handler: "lambda_function.lambda_handler"
            Architectures: 
              - "x86_64"
            Code: 
                S3Bucket: "prod-04-2014-tasks"
                S3Key: !Sub "/snapshots/${AWS::AccountId}/loa037-final-73b7f3c7-7bb0-4aae-a582-68560d2a00c8"
                S3ObjectVersion: "hQVRxCaVbQfh3HXgJ8h0poVKKaJzxcyC"
            MemorySize: 128
            Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/loa037-cc-final"
            Runtime: "python3.9"
            Timeout: 3
            TracingConfig: 
                Mode: "PassThrough"
            EphemeralStorage: 
                Size: 512

    LambdaPermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt LambdaFunction.Arn
            Principal: "apigateway.amazonaws.com"
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayV2Api}/*/*/"

    LambdaPermission2:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt LambdaFunction.Arn
            Principal: "apigateway.amazonaws.com"
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayV2Api}/*/*/api"

